generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String?
  status        String
  ProviderOAuth ProviderOAuth[]
  portfolios    Portfolio?
  ratings       Rating[]

  messageSent     Message[] @relation("MessageSent")
  messageReceived Message[] @relation("MessageReceived")

  @@map("tb_user")
}

model ProviderOAuth {
  id         String             @id @default(uuid())
  userId     String
  provider   SocialProviderType
  providerId String
  email      String
  user       User               @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@map("tb_provider_oauth")
}

model Message {
  id         String        @id @default(uuid())
  content    String
  status     MessageStatus
  createAt   DateTime
  updateAt   DateTime
  senderId   String
  sender     User          @relation("MessageSent", fields: [senderId], references: [id])
  receiverId String
  receiver   User          @relation("MessageReceived", fields: [receiverId], references: [id])

  @@map("tb_message")
}

model Portfolio {
  id          String  @id @default(uuid())
  name        String
  description String
  pageLink    String?
  authorId    String  @unique
  author      User    @relation(fields: [authorId], references: [id])
  works       Work[]

  @@map("tb_portfolio")
}

model Rating {
  id            String          @id @default(uuid())
  score         Float
  userId        String
  workDetailsId String
  user          User            @relation(fields: [userId], references: [id])
  workDetails   WorkCompDetails @relation(fields: [workDetailsId], references: [id])

  @@map("tb_rating")
}

model Competition {
  id           String            @id @default(uuid())
  name         String
  createdAt    DateTime          @default(now())
  startsAt     DateTime?
  endsAt       DateTime?
  worksDetails WorkCompDetails[]

  @@map("tb_competition")
}

model Work {
  id                 String            @id @default(uuid())
  name               String
  description        String
  githubLink         String?
  portfolioId        String
  portfolio          Portfolio         @relation(fields: [portfolioId], references: [id])
  competitionDetails WorkCompDetails[]

  @@map("tb_work")
}

model WorkCompDetails {
  id             String      @id @default(uuid())
  totalReviewers Int
  totalScore     Float
  competitionId  String
  workId         String
  rating         Rating[]
  competition    Competition @relation(fields: [competitionId], references: [id])
  work           Work        @relation(fields: [workId], references: [id])

  @@unique([competitionId, workId])
  @@map("tb_work_comp_details")
}

enum SocialProviderType {
  GOOGLE
}

enum MessageStatus {
  READ
  UNREAD
  RECEIVED
  UNRECEIVED
}
