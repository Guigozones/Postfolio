generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  password   String
  status     String
  portfolios Portfolio?
  ratings    Rating[]

  @@map("tb_user")
}

model Portfolio {
  id          String  @id @default(uuid())
  name        String
  description String
  pageLink    String?
  authorId    String  @unique
  author      User    @relation(fields: [authorId], references: [id])
  works       Work[]

  @@map("tb_portfolio")
}

model Rating {
  id            String          @id @default(uuid())
  score         Float
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  workDetailsId String
  workDetails   WorkCompDetails @relation(fields: [workDetailsId], references: [id])

  @@map("tb_rating")
}

model Competition {
  id           String            @id @default(uuid())
  name         String
  createdAt    DateTime          @default(now())
  startsAt     DateTime?
  endsAt       DateTime?
  worksDetails WorkCompDetails[]

  @@map("tb_competition")
}

model Work {
  id                 String            @id @default(uuid())
  name               String
  description        String
  githubLink         String?
  portfolioId        String
  portfolio          Portfolio         @relation(fields: [portfolioId], references: [id])
  competitionDetails WorkCompDetails[]

  @@map("tb_work")
}

model WorkCompDetails {
  id             String      @id @default(uuid())
  totalReviewers Int
  totalScore     Float
  competitionId  String
  competition    Competition @relation(fields: [competitionId], references: [id])
  workId         String
  work           Work        @relation(fields: [workId], references: [id])
  rating         Rating[]

  @@unique([competitionId, workId])
  @@map("tb_work_comp_details")
}
