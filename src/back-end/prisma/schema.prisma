generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  username      String
  email         String          @unique
  password      String?
  bio           String
  linkedin      String?
  github        String?
  website       String?
  userType      UserType
  ProviderOAuth ProviderOAuth[]
  portfolios    Portfolio?
  ratings       Rating[]

  messageSent     Message[] @relation("MessageSent")
  messageReceived Message[] @relation("MessageReceived")

  @@map("tb_user")
}

model ProviderOAuth {
  id         String             @id @default(uuid())
  userId     String
  provider   SocialProviderType
  providerId String
  email      String
  user       User               @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@map("tb_provider_oauth")
}

model Message {
  id         String        @id @default(uuid())
  content    String
  status     MessageStatus
  createAt   DateTime
  updateAt   DateTime
  senderId   String
  sender     User          @relation("MessageSent", fields: [senderId], references: [id])
  receiverId String
  receiver   User          @relation("MessageReceived", fields: [receiverId], references: [id])

  @@map("tb_message")
}

model Portfolio {
  id          String    @id @default(uuid())
  name        String
  description String
  pagelink    String?
  authorId    String    @unique
  author      User      @relation(fields: [authorId], references: [id])
  works       Project[]

  @@map("tb_portfolio")
}

model Competition {
  id           String               @id @default(uuid())
  name         String
  createdAt    DateTime             @default(now())
  startsAt     DateTime?
  endsAt       DateTime?
  worksDetails ProjectCompDetails[]
  Rating       Rating[]

  @@map("tb_competition")
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String
  category    ProjectCategory
  githublink  String?
  portfolioId String
  portfolio   Portfolio       @relation(fields: [portfolioId], references: [id])
  Rating      Rating[]

  @@map("tb_project")
}

model Rating {
  id                   String             @id @default(uuid())
  score                Float
  userId               String
  projectId            String
  competitionId        String
  projectCompDetailsID String
  user                 User               @relation(fields: [userId], references: [id])
  project              Project            @relation(fields: [projectId], references: [id])
  competition          Competition        @relation(fields: [competitionId], references: [id])
  portfolioDetails     ProjectCompDetails @relation(fields: [projectCompDetailsID], references: [id])

  @@unique([userId, competitionId, projectId])
  @@map("tb_rating")
}

model ProjectCompDetails {
  id             String      @id @default(uuid())
  totalReviewers Int
  totalScore     Float
  competitionId  String
  rating         Rating[]
  competition    Competition @relation(fields: [competitionId], references: [id])

  @@map("tb_project_comp_details")
}

enum UserType {
  DEVELOPER
  EMPLOYER
}

enum ProjectCategory {
  FULLSTACK
  FRONTEND
  BACKEND
  DESIGN
  MOBILE
  DATA_ANALYSIS
  OTHER
}

enum SocialProviderType {
  GOOGLE
}

enum MessageStatus {
  READ
  UNREAD
  RECEIVED
  UNRECEIVED
}
